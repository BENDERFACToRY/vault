schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "comment"
"""
type comment {
  created: timestamptz!
  id: uuid!

  """An object relationship"""
  media: media!
  media_id: uuid!
  media_timestamp: String
  text: String!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "comment"
"""
type comment_aggregate {
  aggregate: comment_aggregate_fields
  nodes: [comment!]!
}

"""
aggregate fields of "comment"
"""
type comment_aggregate_fields {
  count(columns: [comment_select_column!], distinct: Boolean): Int!
  max: comment_max_fields
  min: comment_min_fields
}

"""
order by aggregate values of table "comment"
"""
input comment_aggregate_order_by {
  count: order_by
  max: comment_max_order_by
  min: comment_min_order_by
}

"""
input type for inserting array relation for remote table "comment"
"""
input comment_arr_rel_insert_input {
  data: [comment_insert_input!]!

  """on conflict condition"""
  on_conflict: comment_on_conflict
}

"""
Boolean expression to filter rows from the table "comment". All fields are combined with a logical 'AND'.
"""
input comment_bool_exp {
  _and: [comment_bool_exp!]
  _not: comment_bool_exp
  _or: [comment_bool_exp!]
  created: timestamptz_comparison_exp
  id: uuid_comparison_exp
  media: media_bool_exp
  media_id: uuid_comparison_exp
  media_timestamp: String_comparison_exp
  text: String_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "comment"
"""
enum comment_constraint {
  """unique or primary key constraint"""
  comment_pkey
}

"""
input type for inserting data into table "comment"
"""
input comment_insert_input {
  created: timestamptz
  id: uuid
  media: media_obj_rel_insert_input
  media_id: uuid
  media_timestamp: String
  text: String
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type comment_max_fields {
  created: timestamptz
  id: uuid
  media_id: uuid
  media_timestamp: String
  text: String
  user_id: uuid
}

"""
order by max() on columns of table "comment"
"""
input comment_max_order_by {
  created: order_by
  id: order_by
  media_id: order_by
  media_timestamp: order_by
  text: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type comment_min_fields {
  created: timestamptz
  id: uuid
  media_id: uuid
  media_timestamp: String
  text: String
  user_id: uuid
}

"""
order by min() on columns of table "comment"
"""
input comment_min_order_by {
  created: order_by
  id: order_by
  media_id: order_by
  media_timestamp: order_by
  text: order_by
  user_id: order_by
}

"""
response of any mutation on the table "comment"
"""
type comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comment!]!
}

"""
on conflict condition type for table "comment"
"""
input comment_on_conflict {
  constraint: comment_constraint!
  update_columns: [comment_update_column!]! = []
  where: comment_bool_exp
}

"""Ordering options when selecting data from "comment"."""
input comment_order_by {
  created: order_by
  id: order_by
  media: media_order_by
  media_id: order_by
  media_timestamp: order_by
  text: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: comment"""
input comment_pk_columns_input {
  id: uuid!
}

"""
select columns of table "comment"
"""
enum comment_select_column {
  """column name"""
  created

  """column name"""
  id

  """column name"""
  media_id

  """column name"""
  media_timestamp

  """column name"""
  text

  """column name"""
  user_id
}

"""
input type for updating data in table "comment"
"""
input comment_set_input {
  created: timestamptz
  id: uuid
  media_id: uuid
  media_timestamp: String
  text: String
  user_id: uuid
}

"""
update columns of table "comment"
"""
enum comment_update_column {
  """column name"""
  created

  """column name"""
  id

  """column name"""
  media_id

  """column name"""
  media_timestamp

  """column name"""
  text

  """column name"""
  user_id
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "discord"
"""
type discord {
  avatar: String
  bot: Boolean!
  discriminator: String
  email: String
  id: String!
  roles(
    """JSON select path"""
    path: String
  ): jsonb!
  system: Boolean!

  """An object relationship"""
  user: user
  username: String!
}

"""
aggregated selection of "discord"
"""
type discord_aggregate {
  aggregate: discord_aggregate_fields
  nodes: [discord!]!
}

"""
aggregate fields of "discord"
"""
type discord_aggregate_fields {
  count(columns: [discord_select_column!], distinct: Boolean): Int!
  max: discord_max_fields
  min: discord_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input discord_append_input {
  roles: jsonb
}

"""
Boolean expression to filter rows from the table "discord". All fields are combined with a logical 'AND'.
"""
input discord_bool_exp {
  _and: [discord_bool_exp!]
  _not: discord_bool_exp
  _or: [discord_bool_exp!]
  avatar: String_comparison_exp
  bot: Boolean_comparison_exp
  discriminator: String_comparison_exp
  email: String_comparison_exp
  id: String_comparison_exp
  roles: jsonb_comparison_exp
  system: Boolean_comparison_exp
  user: user_bool_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "discord"
"""
enum discord_constraint {
  """unique or primary key constraint"""
  discord_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input discord_delete_at_path_input {
  roles: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input discord_delete_elem_input {
  roles: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input discord_delete_key_input {
  roles: String
}

"""
input type for inserting data into table "discord"
"""
input discord_insert_input {
  avatar: String
  bot: Boolean
  discriminator: String
  email: String
  id: String
  roles: jsonb
  system: Boolean
  user: user_obj_rel_insert_input
  username: String
}

"""aggregate max on columns"""
type discord_max_fields {
  avatar: String
  discriminator: String
  email: String
  id: String
  username: String
}

"""aggregate min on columns"""
type discord_min_fields {
  avatar: String
  discriminator: String
  email: String
  id: String
  username: String
}

"""
response of any mutation on the table "discord"
"""
type discord_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [discord!]!
}

"""
input type for inserting object relation for remote table "discord"
"""
input discord_obj_rel_insert_input {
  data: discord_insert_input!

  """on conflict condition"""
  on_conflict: discord_on_conflict
}

"""
on conflict condition type for table "discord"
"""
input discord_on_conflict {
  constraint: discord_constraint!
  update_columns: [discord_update_column!]! = []
  where: discord_bool_exp
}

"""Ordering options when selecting data from "discord"."""
input discord_order_by {
  avatar: order_by
  bot: order_by
  discriminator: order_by
  email: order_by
  id: order_by
  roles: order_by
  system: order_by
  user: user_order_by
  username: order_by
}

"""primary key columns input for table: discord"""
input discord_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input discord_prepend_input {
  roles: jsonb
}

"""
select columns of table "discord"
"""
enum discord_select_column {
  """column name"""
  avatar

  """column name"""
  bot

  """column name"""
  discriminator

  """column name"""
  email

  """column name"""
  id

  """column name"""
  roles

  """column name"""
  system

  """column name"""
  username
}

"""
input type for updating data in table "discord"
"""
input discord_set_input {
  avatar: String
  bot: Boolean
  discriminator: String
  email: String
  id: String
  roles: jsonb
  system: Boolean
  username: String
}

"""
update columns of table "discord"
"""
enum discord_update_column {
  """column name"""
  avatar

  """column name"""
  bot

  """column name"""
  discriminator

  """column name"""
  email

  """column name"""
  id

  """column name"""
  roles

  """column name"""
  system

  """column name"""
  username
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "like"
"""
type like {
  created: timestamptz!

  """An object relationship"""
  media: media!
  media_id: uuid!

  """An object relationship"""
  user: user!
  user_id: uuid!
}

"""
aggregated selection of "like"
"""
type like_aggregate {
  aggregate: like_aggregate_fields
  nodes: [like!]!
}

"""
aggregate fields of "like"
"""
type like_aggregate_fields {
  count(columns: [like_select_column!], distinct: Boolean): Int!
  max: like_max_fields
  min: like_min_fields
}

"""
order by aggregate values of table "like"
"""
input like_aggregate_order_by {
  count: order_by
  max: like_max_order_by
  min: like_min_order_by
}

"""
input type for inserting array relation for remote table "like"
"""
input like_arr_rel_insert_input {
  data: [like_insert_input!]!

  """on conflict condition"""
  on_conflict: like_on_conflict
}

"""
Boolean expression to filter rows from the table "like". All fields are combined with a logical 'AND'.
"""
input like_bool_exp {
  _and: [like_bool_exp!]
  _not: like_bool_exp
  _or: [like_bool_exp!]
  created: timestamptz_comparison_exp
  media: media_bool_exp
  media_id: uuid_comparison_exp
  user: user_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "like"
"""
enum like_constraint {
  """unique or primary key constraint"""
  like_pkey
}

"""
input type for inserting data into table "like"
"""
input like_insert_input {
  created: timestamptz
  media: media_obj_rel_insert_input
  media_id: uuid
  user: user_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type like_max_fields {
  created: timestamptz
  media_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "like"
"""
input like_max_order_by {
  created: order_by
  media_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type like_min_fields {
  created: timestamptz
  media_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "like"
"""
input like_min_order_by {
  created: order_by
  media_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "like"
"""
type like_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [like!]!
}

"""
on conflict condition type for table "like"
"""
input like_on_conflict {
  constraint: like_constraint!
  update_columns: [like_update_column!]! = []
  where: like_bool_exp
}

"""Ordering options when selecting data from "like"."""
input like_order_by {
  created: order_by
  media: media_order_by
  media_id: order_by
  user: user_order_by
  user_id: order_by
}

"""primary key columns input for table: like"""
input like_pk_columns_input {
  media_id: uuid!
  user_id: uuid!
}

"""
select columns of table "like"
"""
enum like_select_column {
  """column name"""
  created

  """column name"""
  media_id

  """column name"""
  user_id
}

"""
input type for updating data in table "like"
"""
input like_set_input {
  created: timestamptz
  media_id: uuid
  user_id: uuid
}

"""
update columns of table "like"
"""
enum like_update_column {
  """column name"""
  created

  """column name"""
  media_id

  """column name"""
  user_id
}

"""
columns and relationships of "media"
"""
type media {
  bpm: String

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!
  data_folder: String!
  id: uuid!

  """
  A computed field, executes function "media_liked_by_user"
  """
  liked: Boolean

  """An array relationship"""
  likes(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): [like!]!

  """An aggregate relationship"""
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): like_aggregate!

  """
  A computed field, executes function "media_likes_count"
  """
  likes_count: Int
  recorded_date: date
  season: String
  stereo_mix(
    """JSON select path"""
    path: String
  ): jsonb!

  """An array relationship"""
  tags(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """An aggregate relationship"""
  tags_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!
  title: String!
  torrent: String
  tracks(
    """JSON select path"""
    path: String
  ): jsonb!
  youtube_url: String
}

"""
aggregated selection of "media"
"""
type media_aggregate {
  aggregate: media_aggregate_fields
  nodes: [media!]!
}

"""
aggregate fields of "media"
"""
type media_aggregate_fields {
  count(columns: [media_select_column!], distinct: Boolean): Int!
  max: media_max_fields
  min: media_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input media_append_input {
  stereo_mix: jsonb
  tracks: jsonb
}

"""
Boolean expression to filter rows from the table "media". All fields are combined with a logical 'AND'.
"""
input media_bool_exp {
  _and: [media_bool_exp!]
  _not: media_bool_exp
  _or: [media_bool_exp!]
  bpm: String_comparison_exp
  comments: comment_bool_exp
  data_folder: String_comparison_exp
  id: uuid_comparison_exp
  likes: like_bool_exp
  recorded_date: date_comparison_exp
  season: String_comparison_exp
  stereo_mix: jsonb_comparison_exp
  tags: tag_bool_exp
  title: String_comparison_exp
  torrent: String_comparison_exp
  tracks: jsonb_comparison_exp
  youtube_url: String_comparison_exp
}

"""
unique or primary key constraints on table "media"
"""
enum media_constraint {
  """unique or primary key constraint"""
  media_data_folder_key

  """unique or primary key constraint"""
  media_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input media_delete_at_path_input {
  stereo_mix: [String!]
  tracks: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input media_delete_elem_input {
  stereo_mix: Int
  tracks: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input media_delete_key_input {
  stereo_mix: String
  tracks: String
}

"""
input type for inserting data into table "media"
"""
input media_insert_input {
  bpm: String
  comments: comment_arr_rel_insert_input
  data_folder: String
  id: uuid
  likes: like_arr_rel_insert_input
  recorded_date: date
  season: String
  stereo_mix: jsonb
  tags: tag_arr_rel_insert_input
  title: String
  torrent: String
  tracks: jsonb
  youtube_url: String
}

"""aggregate max on columns"""
type media_max_fields {
  bpm: String
  data_folder: String
  id: uuid
  recorded_date: date
  season: String
  title: String
  torrent: String
  youtube_url: String
}

"""aggregate min on columns"""
type media_min_fields {
  bpm: String
  data_folder: String
  id: uuid
  recorded_date: date
  season: String
  title: String
  torrent: String
  youtube_url: String
}

"""
response of any mutation on the table "media"
"""
type media_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [media!]!
}

"""
input type for inserting object relation for remote table "media"
"""
input media_obj_rel_insert_input {
  data: media_insert_input!

  """on conflict condition"""
  on_conflict: media_on_conflict
}

"""
on conflict condition type for table "media"
"""
input media_on_conflict {
  constraint: media_constraint!
  update_columns: [media_update_column!]! = []
  where: media_bool_exp
}

"""Ordering options when selecting data from "media"."""
input media_order_by {
  bpm: order_by
  comments_aggregate: comment_aggregate_order_by
  data_folder: order_by
  id: order_by
  likes_aggregate: like_aggregate_order_by
  recorded_date: order_by
  season: order_by
  stereo_mix: order_by
  tags_aggregate: tag_aggregate_order_by
  title: order_by
  torrent: order_by
  tracks: order_by
  youtube_url: order_by
}

"""primary key columns input for table: media"""
input media_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input media_prepend_input {
  stereo_mix: jsonb
  tracks: jsonb
}

"""
select columns of table "media"
"""
enum media_select_column {
  """column name"""
  bpm

  """column name"""
  data_folder

  """column name"""
  id

  """column name"""
  recorded_date

  """column name"""
  season

  """column name"""
  stereo_mix

  """column name"""
  title

  """column name"""
  torrent

  """column name"""
  tracks

  """column name"""
  youtube_url
}

"""
input type for updating data in table "media"
"""
input media_set_input {
  bpm: String
  data_folder: String
  id: uuid
  recorded_date: date
  season: String
  stereo_mix: jsonb
  title: String
  torrent: String
  tracks: jsonb
  youtube_url: String
}

"""
update columns of table "media"
"""
enum media_update_column {
  """column name"""
  bpm

  """column name"""
  data_folder

  """column name"""
  id

  """column name"""
  recorded_date

  """column name"""
  season

  """column name"""
  stereo_mix

  """column name"""
  title

  """column name"""
  torrent

  """column name"""
  tracks

  """column name"""
  youtube_url
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "comment"
  """
  delete_comment(
    """filter the rows which have to be deleted"""
    where: comment_bool_exp!
  ): comment_mutation_response

  """
  delete single row from the table: "comment"
  """
  delete_comment_by_pk(id: uuid!): comment

  """
  delete data from the table: "discord"
  """
  delete_discord(
    """filter the rows which have to be deleted"""
    where: discord_bool_exp!
  ): discord_mutation_response

  """
  delete single row from the table: "discord"
  """
  delete_discord_by_pk(id: String!): discord

  """
  delete data from the table: "like"
  """
  delete_like(
    """filter the rows which have to be deleted"""
    where: like_bool_exp!
  ): like_mutation_response

  """
  delete single row from the table: "like"
  """
  delete_like_by_pk(media_id: uuid!, user_id: uuid!): like

  """
  delete data from the table: "media"
  """
  delete_media(
    """filter the rows which have to be deleted"""
    where: media_bool_exp!
  ): media_mutation_response

  """
  delete single row from the table: "media"
  """
  delete_media_by_pk(id: uuid!): media

  """
  delete data from the table: "oauth.token"
  """
  delete_oauth_token(
    """filter the rows which have to be deleted"""
    where: oauth_token_bool_exp!
  ): oauth_token_mutation_response

  """
  delete data from the table: "tag"
  """
  delete_tag(
    """filter the rows which have to be deleted"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  delete single row from the table: "tag"
  """
  delete_tag_by_pk(media_id: uuid!, name: String!): tag

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: uuid!): user

  """
  insert data into the table: "comment"
  """
  insert_comment(
    """the rows to be inserted"""
    objects: [comment_insert_input!]!

    """on conflict condition"""
    on_conflict: comment_on_conflict
  ): comment_mutation_response

  """
  insert a single row into the table: "comment"
  """
  insert_comment_one(
    """the row to be inserted"""
    object: comment_insert_input!

    """on conflict condition"""
    on_conflict: comment_on_conflict
  ): comment

  """
  insert data into the table: "discord"
  """
  insert_discord(
    """the rows to be inserted"""
    objects: [discord_insert_input!]!

    """on conflict condition"""
    on_conflict: discord_on_conflict
  ): discord_mutation_response

  """
  insert a single row into the table: "discord"
  """
  insert_discord_one(
    """the row to be inserted"""
    object: discord_insert_input!

    """on conflict condition"""
    on_conflict: discord_on_conflict
  ): discord

  """
  insert data into the table: "like"
  """
  insert_like(
    """the rows to be inserted"""
    objects: [like_insert_input!]!

    """on conflict condition"""
    on_conflict: like_on_conflict
  ): like_mutation_response

  """
  insert a single row into the table: "like"
  """
  insert_like_one(
    """the row to be inserted"""
    object: like_insert_input!

    """on conflict condition"""
    on_conflict: like_on_conflict
  ): like

  """
  insert data into the table: "media"
  """
  insert_media(
    """the rows to be inserted"""
    objects: [media_insert_input!]!

    """on conflict condition"""
    on_conflict: media_on_conflict
  ): media_mutation_response

  """
  insert a single row into the table: "media"
  """
  insert_media_one(
    """the row to be inserted"""
    object: media_insert_input!

    """on conflict condition"""
    on_conflict: media_on_conflict
  ): media

  """
  insert data into the table: "oauth.token"
  """
  insert_oauth_token(
    """the rows to be inserted"""
    objects: [oauth_token_insert_input!]!
  ): oauth_token_mutation_response

  """
  insert a single row into the table: "oauth.token"
  """
  insert_oauth_token_one(
    """the row to be inserted"""
    object: oauth_token_insert_input!
  ): oauth_token

  """
  insert data into the table: "tag"
  """
  insert_tag(
    """the rows to be inserted"""
    objects: [tag_insert_input!]!

    """on conflict condition"""
    on_conflict: tag_on_conflict
  ): tag_mutation_response

  """
  insert a single row into the table: "tag"
  """
  insert_tag_one(
    """the row to be inserted"""
    object: tag_insert_input!

    """on conflict condition"""
    on_conflict: tag_on_conflict
  ): tag

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "comment"
  """
  update_comment(
    """sets the columns of the filtered rows to the given values"""
    _set: comment_set_input

    """filter the rows which have to be updated"""
    where: comment_bool_exp!
  ): comment_mutation_response

  """
  update single row of the table: "comment"
  """
  update_comment_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: comment_set_input
    pk_columns: comment_pk_columns_input!
  ): comment

  """
  update data of the table: "discord"
  """
  update_discord(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: discord_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: discord_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: discord_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: discord_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: discord_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: discord_set_input

    """filter the rows which have to be updated"""
    where: discord_bool_exp!
  ): discord_mutation_response

  """
  update single row of the table: "discord"
  """
  update_discord_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: discord_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: discord_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: discord_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: discord_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: discord_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: discord_set_input
    pk_columns: discord_pk_columns_input!
  ): discord

  """
  update data of the table: "like"
  """
  update_like(
    """sets the columns of the filtered rows to the given values"""
    _set: like_set_input

    """filter the rows which have to be updated"""
    where: like_bool_exp!
  ): like_mutation_response

  """
  update single row of the table: "like"
  """
  update_like_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: like_set_input
    pk_columns: like_pk_columns_input!
  ): like

  """
  update data of the table: "media"
  """
  update_media(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: media_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: media_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: media_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: media_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: media_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: media_set_input

    """filter the rows which have to be updated"""
    where: media_bool_exp!
  ): media_mutation_response

  """
  update single row of the table: "media"
  """
  update_media_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: media_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: media_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: media_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: media_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: media_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: media_set_input
    pk_columns: media_pk_columns_input!
  ): media

  """
  update data of the table: "oauth.token"
  """
  update_oauth_token(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: oauth_token_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: oauth_token_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: oauth_token_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: oauth_token_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: oauth_token_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: oauth_token_set_input

    """filter the rows which have to be updated"""
    where: oauth_token_bool_exp!
  ): oauth_token_mutation_response

  """
  update data of the table: "tag"
  """
  update_tag(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input

    """filter the rows which have to be updated"""
    where: tag_bool_exp!
  ): tag_mutation_response

  """
  update single row of the table: "tag"
  """
  update_tag_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tag_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tag_set_input
    pk_columns: tag_pk_columns_input!
  ): tag

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

"""
columns and relationships of "oauth.token"
"""
type oauth_token {
  access_token: String!
  expires: timestamptz!
  refresh_token: String
  scope(
    """JSON select path"""
    path: String
  ): jsonb
  user_id: uuid!
}

"""
aggregated selection of "oauth.token"
"""
type oauth_token_aggregate {
  aggregate: oauth_token_aggregate_fields
  nodes: [oauth_token!]!
}

"""
aggregate fields of "oauth.token"
"""
type oauth_token_aggregate_fields {
  count(columns: [oauth_token_select_column!], distinct: Boolean): Int!
  max: oauth_token_max_fields
  min: oauth_token_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input oauth_token_append_input {
  scope: jsonb
}

"""
Boolean expression to filter rows from the table "oauth.token". All fields are combined with a logical 'AND'.
"""
input oauth_token_bool_exp {
  _and: [oauth_token_bool_exp!]
  _not: oauth_token_bool_exp
  _or: [oauth_token_bool_exp!]
  access_token: String_comparison_exp
  expires: timestamptz_comparison_exp
  refresh_token: String_comparison_exp
  scope: jsonb_comparison_exp
  user_id: uuid_comparison_exp
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input oauth_token_delete_at_path_input {
  scope: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input oauth_token_delete_elem_input {
  scope: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input oauth_token_delete_key_input {
  scope: String
}

"""
input type for inserting data into table "oauth.token"
"""
input oauth_token_insert_input {
  access_token: String
  expires: timestamptz
  refresh_token: String
  scope: jsonb
  user_id: uuid
}

"""aggregate max on columns"""
type oauth_token_max_fields {
  access_token: String
  expires: timestamptz
  refresh_token: String
  user_id: uuid
}

"""aggregate min on columns"""
type oauth_token_min_fields {
  access_token: String
  expires: timestamptz
  refresh_token: String
  user_id: uuid
}

"""
response of any mutation on the table "oauth.token"
"""
type oauth_token_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [oauth_token!]!
}

"""
input type for inserting object relation for remote table "oauth.token"
"""
input oauth_token_obj_rel_insert_input {
  data: oauth_token_insert_input!
}

"""Ordering options when selecting data from "oauth.token"."""
input oauth_token_order_by {
  access_token: order_by
  expires: order_by
  refresh_token: order_by
  scope: order_by
  user_id: order_by
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input oauth_token_prepend_input {
  scope: jsonb
}

"""
select columns of table "oauth.token"
"""
enum oauth_token_select_column {
  """column name"""
  access_token

  """column name"""
  expires

  """column name"""
  refresh_token

  """column name"""
  scope

  """column name"""
  user_id
}

"""
input type for updating data in table "oauth.token"
"""
input oauth_token_set_input {
  access_token: String
  expires: timestamptz
  refresh_token: String
  scope: jsonb
  user_id: uuid
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "comment"
  """
  comment(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch aggregated fields from the table: "comment"
  """
  comment_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """fetch data from the table: "comment" using primary key columns"""
  comment_by_pk(id: uuid!): comment

  """
  fetch data from the table: "discord"
  """
  discord(
    """distinct select on columns"""
    distinct_on: [discord_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discord_order_by!]

    """filter the rows returned"""
    where: discord_bool_exp
  ): [discord!]!

  """
  fetch aggregated fields from the table: "discord"
  """
  discord_aggregate(
    """distinct select on columns"""
    distinct_on: [discord_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discord_order_by!]

    """filter the rows returned"""
    where: discord_bool_exp
  ): discord_aggregate!

  """fetch data from the table: "discord" using primary key columns"""
  discord_by_pk(id: String!): discord

  """
  fetch data from the table: "like"
  """
  like(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): [like!]!

  """
  fetch aggregated fields from the table: "like"
  """
  like_aggregate(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): like_aggregate!

  """fetch data from the table: "like" using primary key columns"""
  like_by_pk(media_id: uuid!, user_id: uuid!): like

  """
  fetch data from the table: "media"
  """
  media(
    """distinct select on columns"""
    distinct_on: [media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [media_order_by!]

    """filter the rows returned"""
    where: media_bool_exp
  ): [media!]!

  """
  fetch aggregated fields from the table: "media"
  """
  media_aggregate(
    """distinct select on columns"""
    distinct_on: [media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [media_order_by!]

    """filter the rows returned"""
    where: media_bool_exp
  ): media_aggregate!

  """fetch data from the table: "media" using primary key columns"""
  media_by_pk(id: uuid!): media

  """
  fetch data from the table: "oauth.token"
  """
  oauth_token(
    """distinct select on columns"""
    distinct_on: [oauth_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oauth_token_order_by!]

    """filter the rows returned"""
    where: oauth_token_bool_exp
  ): [oauth_token!]!

  """
  fetch aggregated fields from the table: "oauth.token"
  """
  oauth_token_aggregate(
    """distinct select on columns"""
    distinct_on: [oauth_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oauth_token_order_by!]

    """filter the rows returned"""
    where: oauth_token_bool_exp
  ): oauth_token_aggregate!

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(media_id: uuid!, name: String!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user
}

type subscription_root {
  """
  fetch data from the table: "comment"
  """
  comment(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """
  fetch aggregated fields from the table: "comment"
  """
  comment_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """fetch data from the table: "comment" using primary key columns"""
  comment_by_pk(id: uuid!): comment

  """
  fetch data from the table: "discord"
  """
  discord(
    """distinct select on columns"""
    distinct_on: [discord_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discord_order_by!]

    """filter the rows returned"""
    where: discord_bool_exp
  ): [discord!]!

  """
  fetch aggregated fields from the table: "discord"
  """
  discord_aggregate(
    """distinct select on columns"""
    distinct_on: [discord_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discord_order_by!]

    """filter the rows returned"""
    where: discord_bool_exp
  ): discord_aggregate!

  """fetch data from the table: "discord" using primary key columns"""
  discord_by_pk(id: String!): discord

  """
  fetch data from the table: "like"
  """
  like(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): [like!]!

  """
  fetch aggregated fields from the table: "like"
  """
  like_aggregate(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): like_aggregate!

  """fetch data from the table: "like" using primary key columns"""
  like_by_pk(media_id: uuid!, user_id: uuid!): like

  """
  fetch data from the table: "media"
  """
  media(
    """distinct select on columns"""
    distinct_on: [media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [media_order_by!]

    """filter the rows returned"""
    where: media_bool_exp
  ): [media!]!

  """
  fetch aggregated fields from the table: "media"
  """
  media_aggregate(
    """distinct select on columns"""
    distinct_on: [media_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [media_order_by!]

    """filter the rows returned"""
    where: media_bool_exp
  ): media_aggregate!

  """fetch data from the table: "media" using primary key columns"""
  media_by_pk(id: uuid!): media

  """
  fetch data from the table: "oauth.token"
  """
  oauth_token(
    """distinct select on columns"""
    distinct_on: [oauth_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oauth_token_order_by!]

    """filter the rows returned"""
    where: oauth_token_bool_exp
  ): [oauth_token!]!

  """
  fetch aggregated fields from the table: "oauth.token"
  """
  oauth_token_aggregate(
    """distinct select on columns"""
    distinct_on: [oauth_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [oauth_token_order_by!]

    """filter the rows returned"""
    where: oauth_token_bool_exp
  ): oauth_token_aggregate!

  """
  fetch data from the table: "tag"
  """
  tag(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): [tag!]!

  """
  fetch aggregated fields from the table: "tag"
  """
  tag_aggregate(
    """distinct select on columns"""
    distinct_on: [tag_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tag_order_by!]

    """filter the rows returned"""
    where: tag_bool_exp
  ): tag_aggregate!

  """fetch data from the table: "tag" using primary key columns"""
  tag_by_pk(media_id: uuid!, name: String!): tag

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: uuid!): user
}

"""
columns and relationships of "tag"
"""
type tag {
  """An object relationship"""
  media: media!
  media_id: uuid!
  name: String!
  score: Int
}

"""
aggregated selection of "tag"
"""
type tag_aggregate {
  aggregate: tag_aggregate_fields
  nodes: [tag!]!
}

"""
aggregate fields of "tag"
"""
type tag_aggregate_fields {
  avg: tag_avg_fields
  count(columns: [tag_select_column!], distinct: Boolean): Int!
  max: tag_max_fields
  min: tag_min_fields
  stddev: tag_stddev_fields
  stddev_pop: tag_stddev_pop_fields
  stddev_samp: tag_stddev_samp_fields
  sum: tag_sum_fields
  var_pop: tag_var_pop_fields
  var_samp: tag_var_samp_fields
  variance: tag_variance_fields
}

"""
order by aggregate values of table "tag"
"""
input tag_aggregate_order_by {
  avg: tag_avg_order_by
  count: order_by
  max: tag_max_order_by
  min: tag_min_order_by
  stddev: tag_stddev_order_by
  stddev_pop: tag_stddev_pop_order_by
  stddev_samp: tag_stddev_samp_order_by
  sum: tag_sum_order_by
  var_pop: tag_var_pop_order_by
  var_samp: tag_var_samp_order_by
  variance: tag_variance_order_by
}

"""
input type for inserting array relation for remote table "tag"
"""
input tag_arr_rel_insert_input {
  data: [tag_insert_input!]!

  """on conflict condition"""
  on_conflict: tag_on_conflict
}

"""aggregate avg on columns"""
type tag_avg_fields {
  score: Float
}

"""
order by avg() on columns of table "tag"
"""
input tag_avg_order_by {
  score: order_by
}

"""
Boolean expression to filter rows from the table "tag". All fields are combined with a logical 'AND'.
"""
input tag_bool_exp {
  _and: [tag_bool_exp!]
  _not: tag_bool_exp
  _or: [tag_bool_exp!]
  media: media_bool_exp
  media_id: uuid_comparison_exp
  name: String_comparison_exp
  score: Int_comparison_exp
}

"""
unique or primary key constraints on table "tag"
"""
enum tag_constraint {
  """unique or primary key constraint"""
  tag_pkey
}

"""
input type for incrementing numeric columns in table "tag"
"""
input tag_inc_input {
  score: Int
}

"""
input type for inserting data into table "tag"
"""
input tag_insert_input {
  media: media_obj_rel_insert_input
  media_id: uuid
  name: String
  score: Int
}

"""aggregate max on columns"""
type tag_max_fields {
  media_id: uuid
  name: String
  score: Int
}

"""
order by max() on columns of table "tag"
"""
input tag_max_order_by {
  media_id: order_by
  name: order_by
  score: order_by
}

"""aggregate min on columns"""
type tag_min_fields {
  media_id: uuid
  name: String
  score: Int
}

"""
order by min() on columns of table "tag"
"""
input tag_min_order_by {
  media_id: order_by
  name: order_by
  score: order_by
}

"""
response of any mutation on the table "tag"
"""
type tag_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tag!]!
}

"""
on conflict condition type for table "tag"
"""
input tag_on_conflict {
  constraint: tag_constraint!
  update_columns: [tag_update_column!]! = []
  where: tag_bool_exp
}

"""Ordering options when selecting data from "tag"."""
input tag_order_by {
  media: media_order_by
  media_id: order_by
  name: order_by
  score: order_by
}

"""primary key columns input for table: tag"""
input tag_pk_columns_input {
  media_id: uuid!
  name: String!
}

"""
select columns of table "tag"
"""
enum tag_select_column {
  """column name"""
  media_id

  """column name"""
  name

  """column name"""
  score
}

"""
input type for updating data in table "tag"
"""
input tag_set_input {
  media_id: uuid
  name: String
  score: Int
}

"""aggregate stddev on columns"""
type tag_stddev_fields {
  score: Float
}

"""
order by stddev() on columns of table "tag"
"""
input tag_stddev_order_by {
  score: order_by
}

"""aggregate stddev_pop on columns"""
type tag_stddev_pop_fields {
  score: Float
}

"""
order by stddev_pop() on columns of table "tag"
"""
input tag_stddev_pop_order_by {
  score: order_by
}

"""aggregate stddev_samp on columns"""
type tag_stddev_samp_fields {
  score: Float
}

"""
order by stddev_samp() on columns of table "tag"
"""
input tag_stddev_samp_order_by {
  score: order_by
}

"""aggregate sum on columns"""
type tag_sum_fields {
  score: Int
}

"""
order by sum() on columns of table "tag"
"""
input tag_sum_order_by {
  score: order_by
}

"""
update columns of table "tag"
"""
enum tag_update_column {
  """column name"""
  media_id

  """column name"""
  name

  """column name"""
  score
}

"""aggregate var_pop on columns"""
type tag_var_pop_fields {
  score: Float
}

"""
order by var_pop() on columns of table "tag"
"""
input tag_var_pop_order_by {
  score: order_by
}

"""aggregate var_samp on columns"""
type tag_var_samp_fields {
  score: Float
}

"""
order by var_samp() on columns of table "tag"
"""
input tag_var_samp_order_by {
  score: order_by
}

"""aggregate variance on columns"""
type tag_variance_fields {
  score: Float
}

"""
order by variance() on columns of table "tag"
"""
input tag_variance_order_by {
  score: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user"
"""
type user {
  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): [comment!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comment_order_by!]

    """filter the rows returned"""
    where: comment_bool_exp
  ): comment_aggregate!

  """An object relationship"""
  discord: discord
  discord_id: String
  id: uuid!

  """An array relationship"""
  likes(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): [like!]!

  """An aggregate relationship"""
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [like_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [like_order_by!]

    """filter the rows returned"""
    where: like_bool_exp
  ): like_aggregate!
  name: String!

  """An object relationship"""
  token: oauth_token
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  comments: comment_bool_exp
  discord: discord_bool_exp
  discord_id: String_comparison_exp
  id: uuid_comparison_exp
  likes: like_bool_exp
  name: String_comparison_exp
  token: oauth_token_bool_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  user_discord_id_key

  """unique or primary key constraint"""
  user_name_key

  """unique or primary key constraint"""
  user_pkey
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  comments: comment_arr_rel_insert_input
  discord: discord_obj_rel_insert_input
  discord_id: String
  id: uuid
  likes: like_arr_rel_insert_input
  name: String
  token: oauth_token_obj_rel_insert_input
}

"""aggregate max on columns"""
type user_max_fields {
  discord_id: String
  id: uuid
  name: String
}

"""aggregate min on columns"""
type user_min_fields {
  discord_id: String
  id: uuid
  name: String
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """on conflict condition"""
  on_conflict: user_on_conflict
}

"""
on conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  comments_aggregate: comment_aggregate_order_by
  discord: discord_order_by
  discord_id: order_by
  id: order_by
  likes_aggregate: like_aggregate_order_by
  name: order_by
  token: oauth_token_order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: uuid!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  discord_id

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  discord_id: String
  id: uuid
  name: String
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  discord_id

  """column name"""
  id

  """column name"""
  name
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
